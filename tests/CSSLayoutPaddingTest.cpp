/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * @Generated by gentest/gentest.sh with the following input
 *
<div id="padding_no_size" style="padding: 10px;">
</div>

<div id="padding_container_match_child" style="padding: 10px;">
  <div style="width: 10px; height: 10px;"></div>
</div>

<div id="padding_flex_child" style="width: 100px; height: 100px; padding: 10px;">
  <div style="width: 10px; flex-grow:1"></div>
</div>

<div id="padding_stretch_child" style="width: 100px; height: 100px; padding: 10px;">
  <div style="height: 10px;"></div>
</div>

<div id="padding_center_child" style="width: 100px; height: 100px; padding-start: 10px; padding-top: 10; padding-end: 20px; padding-bottom: 20px; align-items: center; justify-content: center;">
  <div style="height: 10px; width: 10px;"></div>
</div>
 *
 */

#include <CSSLayout/CSSLayout.h>
#include <gtest/gtest.h>

TEST(CSSLayoutTest, padding_no_size) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetPadding(root, CSSEdgeLeft, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeTop, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeRight, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeBottom, 10);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(20, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(20, CSSNodeLayoutGetHeight(root));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(20, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(20, CSSNodeLayoutGetHeight(root));

  CSSNodeFreeRecursive(root);
}

TEST(CSSLayoutTest, padding_container_match_child) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetPadding(root, CSSEdgeLeft, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeTop, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeRight, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeBottom, 10);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeStyleSetWidth(root_child0, 10);
  CSSNodeStyleSetHeight(root_child0, 10);
  CSSNodeInsertChild(root, root_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(30, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(30, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(10, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(30, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(30, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(10, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeFreeRecursive(root);
}

TEST(CSSLayoutTest, padding_flex_child) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetPadding(root, CSSEdgeLeft, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeTop, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeRight, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeBottom, 10);
  CSSNodeStyleSetWidth(root, 100);
  CSSNodeStyleSetHeight(root, 100);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeStyleSetFlexGrow(root_child0, 1);
  CSSNodeStyleSetWidth(root_child0, 10);
  CSSNodeInsertChild(root, root_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(10, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(80, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(80, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(80, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeFreeRecursive(root);
}

TEST(CSSLayoutTest, padding_stretch_child) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetPadding(root, CSSEdgeLeft, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeTop, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeRight, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeBottom, 10);
  CSSNodeStyleSetWidth(root, 100);
  CSSNodeStyleSetHeight(root, 100);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeStyleSetHeight(root_child0, 10);
  CSSNodeInsertChild(root, root_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(10, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(80, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(10, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(80, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeFreeRecursive(root);
}

TEST(CSSLayoutTest, padding_center_child) {
  const CSSNodeRef root = CSSNodeNew();
  CSSNodeStyleSetJustifyContent(root, CSSJustifyCenter);
  CSSNodeStyleSetAlignItems(root, CSSAlignCenter);
  CSSNodeStyleSetPadding(root, CSSEdgeStart, 10);
  CSSNodeStyleSetPadding(root, CSSEdgeEnd, 20);
  CSSNodeStyleSetPadding(root, CSSEdgeBottom, 20);
  CSSNodeStyleSetWidth(root, 100);
  CSSNodeStyleSetHeight(root, 100);

  const CSSNodeRef root_child0 = CSSNodeNew();
  CSSNodeStyleSetAlignSelf(root_child0, CSSAlignCenter);
  CSSNodeStyleSetWidth(root_child0, 10);
  CSSNodeStyleSetHeight(root_child0, 10);
  CSSNodeInsertChild(root, root_child0, 0);
  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionLTR);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(40, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(35, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeCalculateLayout(root, CSSUndefined, CSSUndefined, CSSDirectionRTL);

  ASSERT_EQ(0, CSSNodeLayoutGetLeft(root));
  ASSERT_EQ(0, CSSNodeLayoutGetTop(root));
  ASSERT_EQ(100, CSSNodeLayoutGetWidth(root));
  ASSERT_EQ(100, CSSNodeLayoutGetHeight(root));

  ASSERT_EQ(50, CSSNodeLayoutGetLeft(root_child0));
  ASSERT_EQ(35, CSSNodeLayoutGetTop(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetWidth(root_child0));
  ASSERT_EQ(10, CSSNodeLayoutGetHeight(root_child0));

  CSSNodeFreeRecursive(root);
}
